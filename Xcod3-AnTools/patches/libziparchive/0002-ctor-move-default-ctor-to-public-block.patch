From 0de63c9042f605a3afb0bf43b3938cede0b21e42 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C4=90o=C3=A0n=20Tr=E1=BA=A7n=20C=C3=B4ng=20Danh?=
 <congdanhqx@gmail.com>
Date: Sat, 31 Oct 2020 21:44:05 +0700
Subject: [PATCH] ctor: move default ctor to public block

That code breaks on g++ 9.3.0
---
 zip_archive_common.h | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/zip_archive_common.h b/zip_archive_common.h
index d461856..0a9f81f 100644
--- a/zip_archive_common.h
+++ b/zip_archive_common.h
@@ -60,8 +60,8 @@ struct EocdRecord {
   // Length of the central directory comment.
   uint16_t comment_length;
 
- private:
   EocdRecord() = default;
+ private:
   DISALLOW_COPY_AND_ASSIGN(EocdRecord);
 } __attribute__((packed));
 
@@ -115,8 +115,8 @@ struct CentralDirectoryRecord {
   // beginning of this archive.
   uint32_t local_file_header_offset;
 
- private:
   CentralDirectoryRecord() = default;
+ private:
   DISALLOW_COPY_AND_ASSIGN(CentralDirectoryRecord);
 } __attribute__((packed));
 
@@ -154,8 +154,8 @@ struct LocalFileHeader {
   // will appear immediately after the entry file name.
   uint16_t extra_field_length;
 
- private:
   LocalFileHeader() = default;
+ private:
   DISALLOW_COPY_AND_ASSIGN(LocalFileHeader);
 } __attribute__((packed));
 
@@ -179,8 +179,8 @@ struct DataDescriptor {
   // in the zip file.
   uint64_t uncompressed_size;
 
- private:
   DataDescriptor() = default;
+ private:
   DISALLOW_COPY_AND_ASSIGN(DataDescriptor);
 };
 
@@ -199,8 +199,8 @@ struct Zip64EocdLocator {
   // spans a single disk only.
   uint32_t num_of_disks;
 
- private:
   Zip64EocdLocator() = default;
+ private:
   DISALLOW_COPY_AND_ASSIGN(Zip64EocdLocator);
 } __attribute__((packed));
 
@@ -235,8 +235,8 @@ struct Zip64EocdRecord {
   // the file.
   uint64_t cd_start_offset;
 
- private:
   Zip64EocdRecord() = default;
+ private:
   DISALLOW_COPY_AND_ASSIGN(Zip64EocdRecord);
 } __attribute__((packed));
 
@@ -262,8 +262,8 @@ struct Zip64ExtendedInfo {
   // This implementation assumes that each archive spans a single disk only. So
   // the disk_number is not used.
   // uint32_t disk_num;
- private:
   Zip64ExtendedInfo() = default;
+ private:
   DISALLOW_COPY_AND_ASSIGN(Zip64ExtendedInfo);
 };
 
